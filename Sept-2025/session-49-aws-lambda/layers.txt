Lambda layers
----------------
easy to manage libraries, dependencies and custom code across multiple
lambda functions.

when we are creating lambda functions
each function can use upto 5 layers.
    like ows custom layers or third party libraries like pandas, numpy

Let's implement layer step by step
---------------------------------------
create folder named layer/python/logger.py file

(create folder structure just like above and then zip)

zip the python folder:
    zip -r my-logging-layer.zip python

Now go to the lambda dashbard: layers (left side)
click on create layer: details
    name: shared-logging-layer

    upload zip file which is created earlier and then 
    compatible runtime: python 3.9
    create

here you can see layer created with version 1
-----------------------------------------------------
create lambda function 1
    name: OrderProcessor
    runtime: python3.9
    choose existing role if its already available
    create function

add below code to your function:
---------------------------------------------
import json
from logger import get_logger

logger = get_logger("OrderProcessor")

def lambda_handler(event, context):
    logger.info("Processing Order event")
    logger.debug(f"Event Details: {json.dumps(event)}")

    return {
        "statusCode": 200,
        "body": json.dumps({
            "message": "Order processed successfully"
        }),
    }


once the function created go to layer --> add layer-->
custom layer and select layer which we have created

same process repeat for PaymentProcessor function
create function
    PaymentProcessor

code:

import json
from logger import get_logger

# initialize logger at cold start
logger = get_logger("PaymentProcessor")

def lambda_handler(event, context):
    logger.info("Processing Payment event")
    logger.debug(f"Event Details: {json.dumps(event)}")

    return {
        "statusCode": 200,
        "body": json.dumps({
            "message": "Payment processed successfully"
        }),
    }


    add the code as above just change messages from order to payment 
    here also attach the layer 

go to the test tab create test 
in json pass data: 
    {
        "payment_id":202
    }

click on test.

if Test case passed successfully means we are able to attach layer to 
functions.